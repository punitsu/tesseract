





‘ei eS
el of es wey aes re ' ie














We

ae | Re ge 0 a ee ie 7
he Way of Testivus

*

a

eS Dy on
i ane i, ‘a Pals
oF dingy ‘ : Vay
hae om ’ ee v
* “= - Y oa \ ae * { ; . ;
ee Ifyou write code, write tests.

Ns X
Don't get stuck on unit testing dogma.
f « ‘ hy
oe ; Embrace unit testing karma.
4
_ Think of code and test as one.
-

x The test is more important than the unit.

The best time to test is when the code is fresh.
+ TM Tests not run waste away.

An imperfect test today is better than a perfect test someday.
a a aN ugly test is better than no test.

ie

: Sometimes, the test justifies the means.
Aastt
. e's 8
aa
| @ Only fools use no tools.
. »

Good tests fail.








wae

The Way of Testivus

Less Unit Testing Dogma
More Unit Testing Karma



Good advice on developer and unit testing, packaged
as twelve cryptic bits of ancient Eastern wisdom. ha



St ae a
Translated by Alberto Savoie *






‘ A is
 www.agitar.com/downloads/TheWayOfTestivus.pdfe ©

Pr :















Only fools he no tools a

The farmer who does not use a plow |
is not a good farmer. | if ec

>

¥

The accountant who does not use an abacus
is not a good accountant.

‘Some tasks are best done with bare hands.
Other tasks are best done with tools. .

It is not noble to do by hand

what can be done better with a tool.

It is not wise to use your head ve
when your head is not needed. i



Good tests fail 4



The pupil went to the master programmer and said:

Mgt) ae J 4

“All my tests pass all the time. Don't I deservearaise?”, 9
* > eae

8

gs

” od
Were ty

The master slapped the pupil and replied:

| “If all your tests pass, all the time, you need to write bette tee a ye

i 4 TEN my a red cheek, the pupil went to HR eohcomp ay i o

But that’s another story. . mi F ‘y
a. eS



ms
oe

Bey 8 eh eas




A ;
*

pe pant iq gly t test is better an 110 test
a pate oS
_ Whe Dierede is ugly, the tests may be oe
ih yy | ‘
‘ Th dow't like to write ugly tests,
but ugly code needs testing the most.



















Hy Dont let ugly code stop you from writing tests,
but let ugly code stop you from writing more of it.

ee i AE The pupil asked two master programmers:
{cannot test this code without mocking and violating encapsulation.

ye es What should I do?”

*
= t * : ‘
oa

! : | ce le One master programmer answered:
Mocking i is bad, and you should never violate encapsulation.
Rewrite the code so you can test it properly.”

| Son lt The other master programmer answered:

Bs ef ye eMocking i is good and testing trumps encapsulation. 2

OS i,

bad pa errt confused, went out for a beer. At the local watering hole he saw

e great grand 1 master programmer drinking beer and eating buffalo wings.

: _Greatgrand master,” said the pupil, “I thought you did not drink.

ie SRY And arent you a vegetarian? ie

. Moree a ee
ake

Py

4 % Ma grand: master smiled and replied:
ae? your thirst i is best quenched by beer

f your fu ge er Has ee 4

i vt fa ES ¥










! The best time to test ee a
is whien the code is fresh ‘sik
Your code is like clay. . ee es

When it’s fresh, it’s soft and malleable.
As it ages, it becomes hard and brittle.

| If you write tests when the code is fresh
and easy to change, testing will be easy,
and both the code and the tests will be strong.



Tests not run waste away '
Run your tests often.
Don't let them get stale.
Rejoice when they pass. amet
Rejoice when they fail. t



, 5 oe
An imperfect test today is better
_ than a perfect test a ie

The perfect i is the enemy of the good. —
| ! Don’t wait for best to do better.

+ wait for better to do good.

rite the test ie can today. a



4 “ *
A ie | e - %

















| ee
lh w ven L writing the code, think of the test.
ao v / hn as the test, think of the code.

hero think of code 7 test as one,
testing is easy and code is beautiful.

ee.

“The Sil asked the great master programmer Flying Feathers:

te “What makes a test a unit test?”

Bd Mal This great master programmer answered:

ihe “Fit talks to the database, it is not a unit test.

re p te Tfit communicates across the network, it is not a unit test.

ea - Tfit it touches the file system, it is not a unit test.

ay fi car’t run at the same time as any other unit tests, it is not a unit test.
pipet have to do special things to your environment to run it, it is not a unit test.”

"
Other master programmers jumped in and started arguing.

im - . ihe

-» “Sorry I asked,” said the pupil. Later that night, he received
: a note from the grand master programmer. The note said:
“

: i __ "Teaver fo te gent maser hing ei is an excellent guide.
Follow it, and most of the time you will do well.

But don’t get stuck on any dogma.

ad. Write the test eee needs to be written.”

n a







=

a
f 4 r

‘ ~ ae i . i
a | ry a * u '
+ nN 1 .S slp well

*
to argue gin into ie nig Att.












This translation and printing of
“The Way of Testivus”
is brought to you by:

v JUnit Factory

‘ _ If you like the philosophy of Testivus,
__. and believe in less unit testing dogma

, i mT and more unit testing karma,
Wa Sm please visit:
* i * : a

cEaee y www JUnitFactory.com

oF

_  - JUnit Factory helps you increase your
unit testing karma by amplifying and

Se automating your testing efforts.

*
+

v

Best of all, it’s free.





a *
b hd
4 + oth

on . ee
. “te
*








i

- The master ne:
“When you stop writing code.”

| fe 3 ; The pupil asked:
ba “When do I stop writing code?”

y The master answered:
Pin “When you become a manager.”

;
Be a cay The pupil trembled and asked:

a _ “When do I become a manager?”

Beet «A The master answered:
i ‘ef dS “When you stop writing tests.”

The pupil rushed to write some tests.
. He left skid marks.

3 ek ‘ Wie the code deserves to be written,
7 it deserves to fave tests.







; 4) "
* » A

j : Dogma says: alien a
oe hae a va
; ‘Do this. : i
Do only this. : ,
Do it only this way. i

And do it because I tell you.” .

Dogma is inflexible. ean
Testing needs flexibility. ae
Dogma kills creativity.

Testing needs creativity.

Embrace unit testing karma
Karma Says:
“Do good things and good things will happen to you. 44%

Do them the way you know.
Do them the way you like.”

Karma is flexible. ‘ a we
‘ Fas sae B®
Testing needs flexibility. , Le

Karma thrives on creativity.
Testing needs creativity.


fF



Trans tasatl Intro duction Hin

4)




















In May 2006, an ill-prepared international expedition to the Himalayas lost its way.
After two weeks of wandering around — hungry, thirsty, and smelling fik ¢ inexperienced
expeditioners who got lost for two weeks — they stumbled upon an ancient cave, wh
Inside the cave they saw a maze of cubicles. Each cubicle had a wooden desk, an
ergonomically correct bamboo chair, a Dilbert” calendar, and a strange computer-like _
mechanical device. In one corner of the office they found barrels of dark liquid (Later
identified as early examples of a carbonated and highly caffeinated drink) and a ping- e
pong table. They realized that the cave was an ancient software start-up. The oldest *
one on record. Older even than Netscape. Pn) ct
ue vs
Among the many surprising things they discovered inside the cave was the most ¢? vue
amazing one of all: a note left by one of the programmers. The expedition’s quide, gi
while not very good at guiding, knew how to read the ancient language and trarislated pte

ah

eS :

the note for them:
m :
“We have finished the release ahead of schedule — again. All the tests pass,sowe =
are taking the rest of the week off. We are going sailing. Since it’s a team-building rd
exercise, we hope we can get reimbursed for it.” i
s os
The explorers looked at each other in astonishment. Not only had they discovered the .

oldest software start-up in history, they had also discovered a team of programmers ae
apparently, completed their code ahead of schedule on a regular basis.

What was the secret of these ancient programmers? And what had happened to them?
The expeditioners searched each cubicle for clues, and they found two well-worn
booklets. One of them was called “Learn To Sail In 30 Minutes,” which explained
the fate of the programmers. You are holding in your hands a translation of the +
other booklet, “The Way of Testivus.” Who wrote this mysterious booklet? What is



Testivus? Only Google knows for sure. Ss ee . iy
"Tae. i* mM *

Is the content of this text responsible for these ancient programmers being able to ay 5)

complete projects ahead of schedule? We can’t be sure, but we believe that the amazing ‘ Tea

prowess of these programmers was probably due to a combination of the Testivus we a he
philosophy, and the consumption of large amounts of the dark caffeine Fiquid found
| in the cave. Tey

¥

—

- Read the booklet and draw your own conclusions. ig

% ¥. ? a

ob Biisers Savoia, cr er Colouie et of:Ag
ari 2007, 3 sgh

4

. v7 ie } *





dz
my via ‘ . 1g
